import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from utils.GetClassicOrbitalElements import *
from utils.visualization import plot_classic_orbital_elements


r = np.array([10016.34, -17012.52, 7899.28])
v = np.array([2.5, -1.05, 3.88])

t = np.linspace(0, 20000, 2000000) 

earth_radius = 6378.0  # in km
mu = 3.986e5


T   = 1.1e-3       # N  (1.1 mN)
Isp = 2150.0       # s
g0  = 9.80665      # m/s^2
m0  = 20         # kg
m_dry = 10.0       # kg (cortar empuxo ao atingir massa seca)

def throttle(t, x):
    # Sempre ligado enquanto m > m_dry
    return 1.0 if x[6] > m_dry else 0.0

def x_dot(t, x):
    xdot = np.zeros_like(x)
    # cinemática
    xdot[0] = x[3]
    xdot[1] = x[4]
    xdot[2] = x[5]
    # gravidade 2-corpos
    xdot[3:6] = -(mu/(np.linalg.norm(x[0:3]))**3)*x[0:3]


    u = throttle(t, x)             # 0..1
    v_vec = x[3:6]
    vnorm = np.linalg.norm(v_vec)
    m = x[6]

    if u > 0.0 and vnorm > 0.0 and m > 0.0:
        # a_thrust em km/s^2: (T/m) [m/s^2] -> divide por 1000
        a_thrust_km = (u*T/m) / 1000.0
        v_hat = v_vec / vnorm
        xdot[3:6] += a_thrust_km * v_hat

        # dm/dt em kg/s (SI): -T/(Isp*g0)
        xdot[6] = -u * (T/(Isp*g0))
    else:
        xdot[6] = 0.0

    return xdot


x0 = np.concatenate((r, v, [m0]))

sol = solve_ivp(x_dot, (t[0], t[-1]), x0, t_eval=t, method='RK45', rtol=1e-9, atol=1e-12)
X = sol.y

orbital_elementss = []
for i in range(X.shape[1]):
    x = X[:, i]
    orbital_elementss.append(get_orbital_elements(x[0:3], x[3:6], mu))

plt.figure()
ax = plt.axes(projection='3d')
u, vgrid = np.mgrid[0:2*np.pi:20j, 0:np.pi:10j]
x_e = earth_radius * np.cos(u)*np.sin(vgrid)
y_e = earth_radius * np.sin(u)*np.sin(vgrid)
z_e = earth_radius * np.cos(vgrid)
ax.plot_wireframe(x_e, y_e, z_e, color="r")
ax.plot3D(X[0, :], X[1, :], X[2, :], 'b-')
ax.set_title('Orbit Propagation (low-thrust com variação de massa)')
ax.axis('equal')
plt.show()

plot_classic_orbital_elements(t, orbital_elementss)

# (opcional) massa vs tempo — útil para checar consumo
plt.figure()
plt.plot(t, X[6, :])
plt.xlabel('Tempo [s]'); plt.ylabel('Massa [kg]')
plt.title('Consumo de Propelente')
plt.grid(True, alpha=0.3)
plt.show()
